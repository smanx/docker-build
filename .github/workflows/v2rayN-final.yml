name: v2rayN final build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天的00:00触发
  push:
    branches:
      - push-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/docker-v2rayn
    steps:
      # 拉取私有仓库代码（使用 GitHub PAT）
      - name: Pull docker-project code
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          git clone https://$REPO_ACCESS_TOKEN@github.com/smanx/docker-project.git docker-project

      # 设置 Docker 构建环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 登录 DockerHub
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 构建 Docker 镜像（支持多平台）并推送到 DockerHub
      - name: Build and push Docker image with tags
        run: |
          cd docker-project/v2rayN
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile-v2rayN \
            -t $IMAGE_NAME:dev \
            . --push

      - name: Extract version
        id: version
        run: |
          # 从新构建的镜像中提取版本号
          NEW_VERSION=$(docker run --rm $IMAGE_NAME:dev cat /etc/cont-env.d/APP_VERSION)
          echo "new_version=${NEW_VERSION}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # 尝试拉取最新镜像获取旧版本号
          if docker pull $IMAGE_NAME:latest 2>/dev/null; then
            OLD_VERSION=$(docker run --rm $IMAGE_NAME:latest cat /etc/cont-env.d/APP_VERSION)
          else
            OLD_VERSION="none"
          fi
          echo "old_version=${OLD_VERSION}"
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT

      - name: Push image if version changed
        if: steps.version.outputs.new_version != steps.version.outputs.old_version
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          cd docker-project/v2rayN
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile-v2rayN \
            -t $IMAGE_NAME:$VERSION \
            -t $IMAGE_NAME \
            . --push
          echo "Successfully pushed new version: $VERSION"