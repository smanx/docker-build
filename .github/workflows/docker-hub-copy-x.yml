name: docker-hub-copy
on:
  workflow_dispatch:
    inputs:
      images:
        description: 'A JSON array of images to sync, e.g., ["user/repo1", "user/repo2"]'
        required: false
        default: '["ygkkk/argosbx"]'
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - run

env:
  DESTINATION_USER: smanx
  # 镜像映射配置 - 多对多映射关系
  IMAGE_MAPPING: '[{"o":"argosbx","d":"xbsogra"},{"o":"source_image1","d":"dest_image1"},{"o":"source_image2","d":"dest_image2"}]'

jobs:
  copy-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(github.event.inputs.images || '["ygkkk/argosbx"]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v2

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 登录 Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 安装 jq 工具
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: 拉取并重新构建镜像
        run: |
          SOURCE_IMAGE=${{ matrix.image }}
          SOURCE_NAME=$(echo $SOURCE_IMAGE | cut -d'/' -f2)
          
          # 查找映射配置中的目标镜像名称
          IMAGE_MAPPING='${{ env.IMAGE_MAPPING }}'
          DEST_NAME=""
          
          # 解析映射配置，查找匹配的源镜像
          for mapping in $(echo $IMAGE_MAPPING | jq -c '.[]'); do
            ORIGIN=$(echo $mapping | jq -r '.o')
            DEST=$(echo $mapping | jq -r '.d')
            if [ "$ORIGIN" = "$SOURCE_NAME" ]; then
              DEST_NAME=$DEST
              break
            fi
          done
          
          # 如果没有找到映射，使用源镜像名称
          if [ -z "$DEST_NAME" ]; then
            DEST_NAME=$SOURCE_NAME
          fi
          
          DESTINATION_IMAGE=${{ env.DESTINATION_USER }}/$DEST_NAME
          
          echo "源镜像: $SOURCE_IMAGE"
          echo "源名称: $SOURCE_NAME" 
          echo "目标名称: $DEST_NAME"
          echo "目标镜像: $DESTINATION_IMAGE"
          
          # 拉取源镜像
          docker pull $SOURCE_IMAGE
          
          # 获取原始镜像的配置信息（包括CMD/ENTRYPOINT）
          INSPECT_OUTPUT=$(docker inspect $SOURCE_IMAGE)
          ENTRYPOINT_JSON=$(echo $INSPECT_OUTPUT | jq -r '.[0].Config.Entrypoint // empty')
          CMD_JSON=$(echo $INSPECT_OUTPUT | jq -r '.[0].Config.Cmd // empty')
          
          # 创建Dockerfile
          echo "FROM $SOURCE_IMAGE" > Dockerfile
          echo 'RUN echo "rebuilt_$(date +%s)" > /rebuild_marker' >> Dockerfile
          
          # 恢复ENTRYPOINT
          if [ "$ENTRYPOINT_JSON" != "null" ] && [ -n "$ENTRYPOINT_JSON" ] && [ "$ENTRYPOINT_JSON" != "[]" ]; then
            ENTRYPOINT_CMD=$(echo $ENTRYPOINT_JSON | jq -r 'map(@sh) | join(" ")')
            if [ "$ENTRYPOINT_CMD" != "" ]; then
              echo "ENTRYPOINT $ENTRYPOINT_CMD" >> Dockerfile
            fi
          fi
          
          # 恢复CMD
          if [ "$CMD_JSON" != "null" ] && [ -n "$CMD_JSON" ] && [ "$CMD_JSON" != "[]" ]; then
            CMD_ARG=$(echo $CMD_JSON | jq -r 'map(@sh) | join(" ")')
            if [ "$CMD_ARG" != "" ]; then
              echo "CMD $CMD_ARG" >> Dockerfile
            fi
          fi
          
          echo "构建Dockerfile内容:"
          cat Dockerfile
          
          # 重新构建镜像（这会改变hash）
          docker buildx build --push \
            --platform linux/amd64,linux/arm64 \
            --tag $DESTINATION_IMAGE \
            .
