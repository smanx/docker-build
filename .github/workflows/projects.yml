name: projects build

on:
  workflow_dispatch:
    inputs:
      ouben:
        description: 'Build ouben'
        type: boolean
        default: false
      batch-video-converter:
        description: 'Build batch-video-converter'
        type: boolean
        default: false
      extra_projects:
        description: 'Additional projects to build (comma separated)'
        type: string
        required: false
        default: ''
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - run

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.gen.outputs.projects }}
    steps:
      - name: Generate projects list
        id: gen
        shell: python
        env:
          ALL_PROJECTS: '["ouben","batch-video-converter"]'
        run: |
          import json, os

          all_p    = json.loads(os.getenv('ALL_PROJECTS'))
          event    = os.getenv('GITHUB_EVENT_NAME')
          extra    = os.getenv('INPUT_EXTRA_PROJECTS', '').strip()

          if event == 'workflow_dispatch':
              chosen = [p for p in all_p if os.getenv(f'INPUT_{p.upper().replace("-","_")}') == 'true']
              if extra:
                  chosen.extend([p.strip() for p in extra.split(',') if p.strip()])
              projects = json.dumps(chosen)
          else:
              projects = os.getenv('ALL_PROJECTS')

          with open(os.getenv('GITHUB_OUTPUT'), 'a') as f:
              f.write(f'projects={projects}\n')

  build:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJSON(needs.setup-matrix.outputs.projects) }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.project }}
      REPO_URL: ${{ vars.REPO_URL }}
      REPO_PATH: ${{ vars.REPO_PATH }}
      PROJECT_NAME: ${{ matrix.project }}
    steps:
      - name: Pull project code
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          git clone https://${{ env.REPO_ACCESS_TOKEN }}@${{ env.REPO_URL}} ${{ env.REPO_PATH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push Docker image with tags
        run: |
          cd ${{ env.REPO_PATH }}/${{ env.PROJECT_NAME }}
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ${{ env.IMAGE_NAME }}:latest \
            . --push
