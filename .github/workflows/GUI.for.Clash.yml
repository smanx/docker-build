name: GUI.for.Clash build

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (app or base or all)'
        required: true
        default: 'app'
        type: choice
        options:
          - app
          - base
          - all
  push:
    branches:
      - push-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/gui.for.clash
      REPO_URL: ${{ vars.REPO_URL }}        # 新增：仓库URL变量
      REPO_PATH: ${{ vars.REPO_PATH }}      # 新增：仓库本地路径变量
    steps:
      # 设置默认的 build_type
      - name: Set default build type
        id: set_build_type
        run: |
          if [ -z "${{ github.event.inputs.build_type }}" ]; then
            echo "build_type=app" >> $GITHUB_ENV
          else
            echo "build_type=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
          fi

      # 拉取私有仓库代码（使用 GitHub PAT）
      - name: Pull project code
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          git clone https://$REPO_ACCESS_TOKEN@$REPO_URL $REPO_PATH

      # 克隆 GUI.for.Clash 仓库并获取 tag 列表
      - name: Clone GUI.for.Clash and get tags
        run: |
          git clone https://github.com/GUI-for-Cores/GUI.for.Clash.git
          cd GUI.for.Clash
          git fetch --tags
          git tag -l > ../tags.txt

      # 获取 Docker Hub 上的 tag 列表
      - name: Get Docker Hub tags
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/gui.for.clash
          curl -s "https://registry.hub.docker.com/v2/repositories/$IMAGE_NAME/tags/?page_size=100" | jq -r '.results[].name' > docker_tags.txt

      # 对比 tag 列表并切换到对应 tag
      - name: Compare tags and build missing ones
        run: |
          # 读取 GitHub 仓库的 tag 列表
          GITHUB_TAGS=$(cat tags.txt)
          
          # 读取 Docker Hub 的 tag 列表
          DOCKER_TAGS=$(cat docker_tags.txt)
          
          # 遍历 GitHub 的 tag 列表
          for TAG in $GITHUB_TAGS; do
            # 检查当前 tag 是否在 Docker Hub 的 tag 列表中
            if ! echo "$DOCKER_TAGS" | grep -q "^$TAG$"; then
              echo "Building and pushing tag: $TAG"
              
              # 切换到对应的 tag
              cd GUI.for.Clash
              git checkout $TAG
              cp $REPO_PATH/GUI.for.Clash/Dockerfile GUI.for.Clash/
              # 构建并推送 Docker 镜像
              docker buildx build \
                --platform linux/amd64,linux/arm64 \
                --build-arg BUILD_TYPE=app \
                -t $IMAGE_NAME:$TAG \
                . --push
            else
              echo "Tag $TAG already exists on Docker Hub, skipping..."
            fi
          done