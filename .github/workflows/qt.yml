name: QT build
on:
  workflow_dispatch:
#   schedule:
#     - cron: '0 0 * * *'  # 每天的00:00触发
  push:
    branches:
      - push-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/docker-qt
      REPO_URL: ${{ vars.REPO_URL }}        # 新增：仓库URL变量
      REPO_PATH: ${{ vars.REPO_PATH }}      # 新增：仓库本地路径变量
    steps:
      # 拉取私有仓库代码（使用 GitHub PAT）
      - name: Pull project code
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          git clone https://$REPO_ACCESS_TOKEN@$REPO_URL $REPO_PATH

      - name: Pull code
        run: |
          git clone https://github.com/barry-ran/QtScrcpy.git QtScrcpy

      - name: Pull code
        run: |
          git clone https://github.com/barry-ran/QtScrcpyCore.git QtScrcpyCore

      - name: cp code
        run: |
          cp -r ./QtScrcpyCore ./QtScrcpy/QtScrcpy/QtScrcpyCore && \
          ls /QtScrcpy/QtScrcpy/QtScrcpyCore && \
          cp ${REPO_PATH}/qt/Dockerfile ./QtScrcpy/Dockerfile

            # 设置 Docker 构建环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 登录 DockerHub
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 构建 Base
      - name: Build Base and push Docker image with tags
        run: |
          cd ./QtScrcpy
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE_NAME \
            . --push
        