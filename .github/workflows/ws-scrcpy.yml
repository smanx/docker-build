name: ws-scrcpy build
on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'latest'
  # schedule:
  #   - cron: '0 0 * * *'  # 每天的00:00触发
  push:
    branches:
      - push-all

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ws-scrcpy
      REPO_URL: ${{ vars.REPO_URL }}        # 新增：仓库URL变量
      REPO_PATH: ${{ vars.REPO_PATH }}      # 新增：仓库本地路径变量
      build_tag: ""  # 新增：定义 build_tag 变量

    steps:
      - name: Get tag based on build_type
        run: |
          if [[ "${{ github.event.inputs.build_type }}" == "latest" || "${{ github.event.inputs.build_type }}" == "" ]]; then
            # 修改获取最新tag的方式
            LATEST_TAG=$(curl -s https://api.github.com/repos/NetrisTV/ws-scrcpy/releases/latest | grep '"tag_name":' | cut -d'"' -f4)
            echo "build_tag=${LATEST_TAG}" >> $GITHUB_ENV
          else
            echo "build_tag=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
          fi
          # 打印 build_tag 的值
          echo "build_tag 的值为: ${{ env.build_tag }}"

      # 新增步骤：下载并解压指定版本的代码
      - name: Download and extract ws-scrcpy
        run: |
          mkdir -p out
          wget https://github.com/NetrisTV/ws-scrcpy/archive/refs/tags/${{ env.build_tag }}.tar.gz -O out/ws-scrcpy.tar.gz
          # 修改解压目录为 out
          tar -xzf out/ws-scrcpy.tar.gz -C out

      # 拉取私有仓库代码（使用 GitHub PAT）
      - name: Pull project code
        env:
          REPO_ACCESS_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          git clone https://$REPO_ACCESS_TOKEN@$REPO_URL $REPO_PATH

      # 新增步骤：拷贝 Dockerfile 到 out 目录
      - name: Copy Dockerfile to out directory
        run: |
          cp $REPO_PATH/ws-scrcpy/Dockerfile out/
          tree out # 递归打印 out 目录下的文件

      # 设置 Docker 构建环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # 登录 DockerHub
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # 新增步骤：检查 Docker Hub 上的镜像标签是否存在
      - name: Check if Docker Hub image tag exists
        id: check_tag
        run: |
          if docker manifest inspect $IMAGE_NAME:${{ env.build_tag }} &> /dev/null; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # 构建
      - name: Build App and push Docker image with tags
        run: |
          cd out
          BUILD_TAGS="-t $IMAGE_NAME:latest"
          if [[ "${{ steps.check_tag.outputs.tag_exists }}" == "false" ]]; then
            BUILD_TAGS="-t $IMAGE_NAME:${{ env.build_tag }} $BUILD_TAGS"
          fi
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            $BUILD_TAGS \
            . --push
            